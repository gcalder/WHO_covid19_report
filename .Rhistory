scale_y_log10(breaks = c(0.1,0.01,0.001,0.0001),labels = c("0.1","0.01","0.001","0.0001")) +
scale_x_date(date_labels = "%b %d",breaks=c(today-84,today-63,today-42,today-21,today)) +
coord_cartesian(ylim = c(0.00005,ifelse(current_country_max_cases_per_10k > 0.01, current_country_max_cases_per_10k,0.1)))
# plot deaths per 10k
deaths_per_10k_plot <- ggplot() +
geom_line(data=current_country_data %>% filter(!current_country,cum_deaths_per_10k>0),
aes(x=date,y=cum_deaths_per_10k,group=country),
colour = "lightgray") +
geom_line(data=current_country_data %>% filter(current_country,cum_deaths_per_10k>0),
aes(x=date,y=cum_deaths_per_10k,group=NULL),
colour="black",size = 0.8) +
scale_y_log10(breaks = c(0.1,0.01,0.001,0.0001),labels = c("0.1","0.01","0.001","0.0001")) +
theme_classic(base_size = 15) +
theme(panel.grid.major.y = element_line(colour = "lightgrey",size=0.02),
axis.title.x = element_blank(),
axis.title.y = element_blank())  +
scale_x_date(date_labels = "%b %d",breaks=c(today-84,today-63,today-42,today-21,today),limits = c(current_country_data %>% distinct(date) %>% pull(date) %>% min(),today))  +
coord_cartesian(ylim = c(0.00005,ifelse(current_country_max_deaths_per_10k > 0.01, current_country_max_deaths_per_10k,0.01)))
# plot 7 day case increase
seven_day_cum_cases <- ggplot() +
geom_line(data = current_country_increase_cases %>% filter(!current_country), aes(x=date,y=cum_cases_relative_increase,group = country),colour = "lightgray") +
geom_line(data = current_country_increase_cases %>% filter(current_country), aes(x=date,y=cum_cases_relative_increase,group=NULL),colour="black",size = 0.8) +
labs(x="Date", y = " Relative increase") +
theme_classic(base_size = 15) +
scale_x_date(date_labels = "%b %d",breaks = c(today - 7, today)) +
coord_cartesian(ylim = c(1,ifelse(current_country_max_cases_relative_increase > 1.5, current_country_max_cases_relative_increase,1.5)))
# plot 7 day deaths increase
seven_day_cum_deaths <- ggplot() +
geom_line(data = current_country_increase_deaths %>% filter(!current_country), aes(x=date,y=cum_deaths_relative_increase,group = country),colour="lightgray") +
geom_line(data = current_country_increase_deaths %>% filter(current_country), aes(x=date,y=cum_deaths_relative_increase,group=NULL),colour="black",size = 0.8) +
labs(x="Date") +
theme_classic(base_size = 15) +
theme(axis.title.y = element_blank()) +
scale_x_date(date_labels = "%b %d",breaks = c(today - 7, today)) +
coord_cartesian(ylim = c(1,ifelse(current_country_max_deaths_relative_increase > 1.5, current_country_max_deaths_relative_increase,1.5)))
# combine plots
multi_plot <- plot_grid(cases_plot,
deaths_plot,
cases_per_10k_plot,
deaths_per_10k_plot,
seven_day_cum_cases,
seven_day_cum_deaths,
cols = 2,
align = "hv")
cat("\\begin{figure}[p]")
cat(paste0("\\ssubsection{",i,"}"))
print(multi_plot)
country_summary_text <- country_summary_text_function(i, WHO_latest_day_cases_and_deaths_simulated, WHO_cases_and_deaths_doubling_time)
cat(paste0(country_summary_text$sentence_1,
country_summary_text$sentence_2,
country_summary_text$sentence_3,
country_summary_text$sentence_4,
"\\newpage"))
cat("\\end{figure}")
}
```
&nbsp;
\newpage
# Appendix
<!-- ## Online Report
An online version of the report is available  at [https://dimmestp.shinyapps.io/who_africa_app/](https://dimmestp.shinyapps.io/who_africa_app/).
-->
## Data
### Sources and access
- Case counts for countries in WHO Africa Region from WHO Coronavirus disease (COVID-2019) situation reports https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports (accessed 2400 `r format(today, "%d/%m/%Y")`).
- Death counts for countries in WHO African Region from WHO Coronavirus disease (COVID-2019) situation reports https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports (accessed 2400 `r format(today, "%d/%m/%Y")`).
- Population counts from the World Bank (2018) https://data.worldbank.org/indicator/SP.POP.TOTL?locations=ZG (accessed 0900  30/03/2020).
- Sequenced SARS-CoV-2 genomes for countries in WHO Africa Region are from [GISAID](https://www.gisaid.org/) (accessed 2400 `r format(today, "%d/%m/%Y")`)
### Doubling time calculations
Calculated over prior 7 days using method described by *E. Vynnycky & R. White (2010) An Introduction to Infectious Disease Modelling*, page 74.
Confidence intervals calculated using bootstrapping of a simulated dataset with Poisson error structure, using method published here: https://doi.org/10.1101/2020.02.05.20020750.
### Caveats
- Case count data are affected by any changes in testing strategy or testing effort over time and/or any variation in testing strategy or testing effort between regions.
- Case count data are likely a substantial under-representation of the true number of COVID-19 infections.
- Death data are considered more reliable but may lag behind case data by as much as 3 weeks.
- Countries that have reduced their cumulative total cases/deaths in the last 7 days are assigned a doubling time of -1.
\newpage
\section{Extended Data tables}
### Cumulative reported cases
```{r TabIncidenceRaw, results = 'asis', echo = FALSE}
# Table produced in the analysis script, as it requires the 95%CI, extracted from the simulations
dat.cumsumraw.df <-
WHO_latest_day_cases_and_deaths_simulated %>%
transmute(Country = country,
`Cum. reported cases` = last_day_case_obs,
`95%CI lower` = last_day_case_ci_low,
`95%CI upper` = last_day_case_ci_high) %>%
arrange(desc(`Cum. reported cases`))
kable(dat.cumsumraw.df)
```
\newpage
### Cumulative reported cases per 10,000 population
```{r TabIncidence10k, results = 'asis', echo = FALSE}
# Table produced in the analysis script, as it requires the 95%CI, extracted from the simulations
dat.cumsum10k.df <-
WHO_latest_day_cases_and_deaths_simulated %>%
transmute(Country = country,
`Cum. reported cases per 10k pop` = last_day_case_obs_per_10k,
`95%CI lower` = last_day_case_ci_low_per_10k,
`95%CI upper` = last_day_case_ci_high_per_10k) %>%
arrange(desc(`Cum. reported cases per 10k pop`))
kable(dat.cumsum10k.df)
```
\newpage
### Cumulative deaths
```{r TabDeathsRaw, results = 'asis', echo = FALSE}
# This does not report CI so directly get it from the data tables
tab.total.deaths<-
WHO_latest_day_cases_and_deaths_simulated %>%
transmute(Country = country,
`Cum. reported deaths` = last_day_deaths_obs,
`95%CI lower` = last_day_deaths_ci_low,
`95%CI upper` = last_day_deaths_ci_high) %>%
arrange(desc(`Cum. reported deaths`))
kable(tab.total.deaths)
```
\newpage
### Cumulative deaths per 10,000 populations
```{r TabDeaths10k, results = 'asis', echo = FALSE}
# This does not report CI so directly get it from the data tables
tab.total.deaths.10k<- WHO_latest_day_cases_and_deaths_simulated %>%
transmute(Country = country,
`Cum. reported deaths per 10k pop` = last_day_deaths_obs_per_10k,
`95%CI lower` = last_day_deaths_ci_low_per_10k,
`95%CI upper` = last_day_deaths_ci_high_per_10k) %>%
arrange(desc(`Cum. reported deaths per 10k pop`))
kable(tab.total.deaths.10k)
```
\newpage
### Doubling time (cases)
<!-- The following two tables summarise the doubling times (for cumulative reported cases and deaths respectively) reported in the above figures. Note that a "NA" value notifies countries where no cases/deaths have been reported yet or have if the first cases/deaths occured less than 7 days ago, preventing the computation of doubling time over the chosen 7 day period. A "Inf" value notifies countries where cases/deaths have been reported more than 7 days ago but have not increased since, leading to a zero denominator quotient in the doubling time calculation. A "Inf" value may appear for the 95% CIs while an estimated doubling time is provided. This occurs when the number of cases/deaths is still very low, leading to the common occurence of flat epicurves in the simulated Poisson error bootstrap from which the confidence intervals are estimated. More cases/deaths are required to provide more reliable 95% CIs in those cases. -->
```{r DtTabIncidence, results = 'asis', echo = FALSE}
Td.report.appendix<-
WHO_cases_and_deaths_doubling_time %>%
ungroup() %>%
transmute(Country = country,
`Doubling time (days)` = cases_doubling_time,
`95%CI lower` = cases_ci_low,
`95%CI upper` = cases_ci_upp) %>%
arrange(desc(`Doubling time (days)`))
Td.report.appendix$`Doubling time (days)`[is.infinite(Td.report.appendix$`Doubling time (days)`)] <- NA
kable(Td.report.appendix %>% arrange(`Doubling time (days)`), row.names = FALSE)
```
\newpage
### Doubling time (deaths)
```{r DtTabDeaths, results = 'asis', echo = FALSE}
Td.report.appendix.deaths<-
WHO_cases_and_deaths_doubling_time %>%
ungroup() %>%
transmute(Country = country,
`Doubling time (days)` = deaths_doubling_time,
`95%CI lower` = deaths_ci_low,
`95%CI upper` = deaths_ci_upp) %>%
arrange(desc(`Doubling time (days)`))
Td.report.appendix.deaths$`Doubling time (days)`[is.infinite(Td.report.appendix.deaths$`Doubling time (days)`)] <- NA
kable(Td.report.appendix.deaths %>% arrange(`Doubling time (days)`), row.names = FALSE)
```
load("~/Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master/WHO_report_analysis_2020-06-18.RData")
shiny::runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
install.packages('shinydashboard')
runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
install.packages('leaflet')
runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
install.packages('DT')
runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
# function to scale y-axis if asked
scale_y_function <- function(name=ggplot2::waiver(),
scale_type="Linear",
...) {
if (scale_type == "Linear") {
return(ggplot2::scale_y_continuous(name,...))
} else {
return(ggplot2::scale_y_log10(name,...))
}
}
shiny::runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
runApp()
runApp('Work/EpiGroup Internship/WHO AFRO Weekly Report/WHO_Afro_dashboard-master')
a=2
a <- 2
b <- -3
sig_sq <- 0.5
x <- runif(40)
y <- a + b * x + rnorm(40, sd = sqrt(sig_sq))
(avg_x <- mean(x))
getwd()
write(avg_x, "avg_x.txt")
plot(x, y)
setwd("~/Work/EpiGroup Internship/WHO AFRO Weekly Report/Feifei Update Weekly Ratios")
today<- Sys.Date() # Set date as to that of the data to fetch.
iter = 1000 # Number of iterations for the poisson error simulation (bootstrap), Set to 1000. Or 10 for a quick test.
set.seed(as.numeric(today)) # setting seed allows repeatability of poisson error simulations. Use the date as a reference point for the seed.
source('./script/sourced_functions_Weekly_Ratio_reports.R') # Source several functions used in the below script. See README file for details.
time_window<- 7 # Time window over which doubling time is calculated
t2.define<- today
t1.define<- t2.define - time_window
# library to read excel files
library(readxl)
# large library of generic data science tools for manipulating data
library(tidyverse)
library(magrittr)
# import a relatively sensible colour palette
library(RColorBrewer)
# class interval library to group countries together with similar cases/deaths counts
# so that they are given the same colour
library(classInt)
# libraries to create all of the maps (require a lot of other packages to work)
library(sf)
library(geojsonio)
library(cartography)
# library with useful function for reading/manipulating dates
library(lubridate)
# library to manipulate images
library(magick)
# rolling windows for weekly ratios
library(RcppRoll)
# WHO list of countries & their popsize.
# Various encoding of the countries name used for different purpose (match various data sources, for maps, shortened for figures etc.)
who_country_aliases_and_populations<-
read.csv('input_files/WHO_country_list.csv', stringsAsFactors = FALSE) %>%
rename( popsize = pop)
## Download data from https://covid19.who.int/table and read it in
data <-
read.csv(paste0('./data/', today, '/WHO-COVID-19-global-data.csv', encoding='UTF-8-BOM'), stringsAsFactors = FALSE) %>%
mutate(Date_reported=as.Date(Date_reported, format = "%Y-%m-%d"))
## Download data from https://covid19.who.int/table and read it in
data <-
read.csv(paste0('./data/', today, '/WHO-COVID-19-global-data.csv'), stringsAsFactors = FALSE, encoding='UTF-8-BOM') %>%
mutate(Date_reported=as.Date(Date_reported, format = "%Y-%m-%d"))
## Download data from https://covid19.who.int/table and read it in
data <-
read.csv(paste0('./data/', today, '/WHO-COVID-19-global-data.csv'), stringsAsFactors = FALSE) %>%
mutate(Date_reported=as.Date(Date_reported, format = "%Y-%m-%d"))
## Download data from https://covid19.who.int/table and read it in
data <-
read.csv(paste0('./data/', today, '/WHO-COVID-19-global-data.csv'), stringsAsFactors = FALSE) %>%
rename(Date_reported=ï..Date_reported)
## Download data from https://covid19.who.int/table and read it in
data <-
read.csv(paste0('./data/', today, '/WHO-COVID-19-global-data.csv'), stringsAsFactors = FALSE) %>%
rename(Date_reported=ï..Date_reported) %>%
mutate(Date_reported=as.Date(Date_reported, format = "%Y-%m-%d"))
print(data)
## Extract data for WHO AFRO
africa_data <-
data[which(data$WHO_region == 'AFRO'& !(data$Country == "Réunion") & !(data$Country == "Mayotte")),] %>%## we didn't include the two territories before
select(.,c(1,3,6,8))%>%
rename("date"="Date_reported",
'country'="Country",
'cum_cases'="Cumulative_cases" ,
"cum_deaths"="Cumulative_deaths")
print(africa_data)
WHO_cases_and_deaths<- africa_data %>%
mutate_at('country', ~replace(., .=="Côte d’Ivoire" , "Cote d'Ivoire"))%>%
# revert back to per day deaths / cases
group_by(country) %>%
mutate(cum_cases=as.integer(cum_cases),cum_deaths=as.integer(cum_deaths),cases = as.integer(c(0,diff(cum_cases))), deaths = as.integer(c(0,diff(cum_deaths)))) %>%
ungroup() %>%
# convert to per 10k pop
inner_join(who_country_aliases_and_populations %>%
select(country,popsize)) %>%
mutate(popsize = popsize / 10000,cum_cases_per_10k=cum_cases / popsize,cum_deaths_per_10k=cum_deaths / popsize,cases_per_10k=cases / popsize,deaths_per_10k=deaths / popsize)
# check data is complete
if(!(WHO_cases_and_deaths %>%
group_by(country) %>%
summarise(n()) %>%
distinct(n()) %>%
length()) == 1) stop('Some countries are missing reporting dates')
if(sum(is.na(WHO_cases_and_deaths$cases)) > 0 | sum(is.na(WHO_cases_and_deaths$deaths)) > 0) stop('Some countries have NA entries')
who_countrywide_data <-
WHO_cases_and_deaths[which(WHO_cases_and_deaths$date == as.Date(format(today,"%Y/%m/%d"))),]%>%
select(.,c(1,2,3,4,8,9)) %>%
inner_join(who_country_aliases_and_populations %>%
select(country,ISO3))
WHO_cases_and_deaths_weekly_ratio <- WHO_cases_and_deaths %>%
left_join(weekly_ratios_2(WHO_cases_and_deaths,"cases")) %>%
left_join(weekly_ratios_2(WHO_cases_and_deaths,"deaths"), suffix= c("_c","_d"), by = c("country", "date"))
# Creates the begining image / logo showing the WHO AFRO Region
africa <- geojson_read("./input_files/Africa1.geojson", what="sp")
africa@data %<>% left_join(who_countrywide_data, by=c("ISO_A3"="ISO3"))
africa@data$WHOCountry <- ifelse(is.na(africa@data$country),0,1)
png(file = "input_files/WHO_Africa3.png", width=3246, height=2880, pointsize=22)
typoLayer(spdf = africa, var = "WHOCountry", col = c("darkorange2", "white"), legend.pos = "n")
text(-34, -43,"Total Reported Cases", adj = 0,col="#08519C",font=2,cex=6)
text(-18, -48,paste0(WHO_cases_and_deaths %>% filter(date == today) %>% pull(cum_cases) %>% sum()), adj = 0,col="#08519C",font=2,cex=6)
text(24, -43,"Total Reported Deaths", adj = 0,col="#CB181D",font=2,cex=6)
text(44, -48,paste0(WHO_cases_and_deaths %>% filter(date == today) %>% pull(cum_deaths) %>% sum()), adj = 0,col="#CB181D",font=2,cex=6)
dev.off()
WHO_cases_and_deaths_negative <- WHO_cases_and_deaths %>%
mutate(cases_positive = (cases > -1), deaths_positive = (deaths > -1)) %>%
group_by(country) %>%
mutate(calc_cases_dt = eight_day_pos_window(cases_positive), calc_deaths_dt = eight_day_pos_window(deaths_positive)) %>%
ungroup()
# simulated datasets from bootstrapping
WHO_cases_and_deaths_simulated <- WHO_cases_and_deaths_negative %>%
group_by(country,date) %>%
mutate(sim_deaths = map(iter,rpois_error,deaths,deaths_positive),sim_cases = map(iter,rpois_error,cases,cases_positive)) %>%
group_by(country) %>%
mutate(sim_cum_deaths = sim_cum_calc_per_pop(sim_deaths,1,deaths_positive),
sim_cum_cases = sim_cum_calc_per_pop(sim_cases,1,cases_positive),
sim_cum_deaths_per_10k = sim_cum_calc_per_pop(sim_deaths,popsize,deaths_positive),
sim_cum_cases_per_10k = sim_cum_calc_per_pop(sim_cases,popsize,cases_positive)) %>%
ungroup()
# The TWO NEXT SECTIONS are to collect the Last day incidence of the observed data but ALSO OF THE SIMULATED DATA
# that, to be able to report a 95%CI on the observed data
# Done on the raw number of cases and the per 10k pop
print(WHO_cases_and_deaths_simulated)
# Last day Incidence & CI, raw ----
WHO_latest_day_cases_and_deaths_simulated <- WHO_cases_and_deaths_simulated %>%
filter(date == today) %>%
group_by(country)%>%
transmute(
last_day_case_ci_high =round(quantile(sim_cum_cases[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_high =round(quantile(sim_cum_deaths[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_low =round(quantile(sim_cum_cases[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_low =round(quantile(sim_cum_deaths[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_high_per_10k =round(quantile(sim_cum_cases_per_10k[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_high_per_10k =round(quantile(sim_cum_deaths_per_10k[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_low_per_10k =round(quantile(sim_cum_cases_per_10k[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_low_per_10k =round(quantile(sim_cum_deaths_per_10k[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]]) %>%
inner_join(
WHO_cases_and_deaths %>%
filter(date == today) %>%
transmute(
country,
last_day_case_obs = cum_cases,
last_day_deaths_obs = cum_deaths,
last_day_case_obs_per_10k = cum_cases_per_10k,
last_day_deaths_obs_per_10k = cum_deaths_per_10k
)
) %>%
ungroup()
# The TWO NEXT SECTIONS are to collect the Last day incidence of the observed data but ALSO OF THE SIMULATED DATA
# that, to be able to report a 95%CI on the observed data
# Done on the raw number of cases and the per 10k pop
print(WHO_cases_and_deaths_simulated)
# Last day Incidence & CI, raw ----
WHO_latest_day_cases_and_deaths_simulated <- WHO_cases_and_deaths_simulated %>%
filter(date == today) %>%
group_by(country)%>%
transmute(
last_day_case_ci_high =round(quantile(sim_cum_cases[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_high =round(quantile(sim_cum_deaths[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_low =round(quantile(sim_cum_cases[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_low =round(quantile(sim_cum_deaths[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_high_per_10k =round(quantile(sim_cum_cases_per_10k[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_high_per_10k =round(quantile(sim_cum_deaths_per_10k[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_low_per_10k =round(quantile(sim_cum_cases_per_10k[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_low_per_10k =round(quantile(sim_cum_deaths_per_10k[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]]) %>%
inner_join(
WHO_cases_and_deaths %>%
filter(date == today) %>%
transmute(
country,
last_day_case_obs = cum_cases,
last_day_deaths_obs = cum_deaths,
last_day_case_obs_per_10k = cum_cases_per_10k,
last_day_deaths_obs_per_10k = cum_deaths_per_10k
)
) %>%
ungroup()
who_WR_data<- # Assemble the weekly ratios formatted for maps plotting
who_country_aliases_and_populations[,c('ISO3', 'country')] %>%
left_join(WHO_cases_and_deaths_weekly_ratio %>%
filter(date == today) %>%
select(country,ratio_c,ratio_d), by = 'country') %>%
rename(WR_cases = ratio_c,
WR_deaths = ratio_d,
countryterritoryCode = ISO3)
# Set the NA, -1 and Inf WR to zero, so that they appear in white on the maps
who_WR_data$WR_cases[!is.finite(who_WR_data$WR_cases)]<- 0
who_WR_data$WR_deaths[!is.finite(who_WR_data$WR_deaths)]<- 0
who_WR_data$WR_cases[who_WR_data$WR_cases < 0]<- 0
who_WR_data$WR_deaths[who_WR_data$WR_deaths < 0]<- 0
# Map CASES ----
breaks <- classIntervals(africa@data$cum_cases, n = 8, style = "jenks", na.rm=T)$brks
breaks <- c(0,breaks)
breaks[2]<-1
# 1) SET UP ----
today<- Sys.Date() # Set date as to that of the data to fetch.
iter = 1000 # Number of iterations for the poisson error simulation (bootstrap), Set to 1000. Or 10 for a quick test.
set.seed(as.numeric(today)) # setting seed allows repeatability of poisson error simulations. Use the date as a reference point for the seed.
source('./script/sourced_functions_Weekly_Ratio_reports.R') # Source several functions used in the below script. See README file for details.
time_window<- 7 # Time window over which doubling time is calculated
t2.define<- today
t1.define<- t2.define - time_window
# library to read excel files
library(readxl)
# large library of generic data science tools for manipulating data
library(tidyverse)
library(magrittr)
# import a relatively sensible colour palette
library(RColorBrewer)
# class interval library to group countries together with similar cases/deaths counts
# so that they are given the same colour
library(classInt)
# libraries to create all of the maps (require a lot of other packages to work)
library(sf)
library(geojsonio)
library(cartography)
# library with useful function for reading/manipulating dates
library(lubridate)
# library to manipulate images
library(magick)
# rolling windows for weekly ratios
library(RcppRoll)
# LOADING DATA ----
# Load data and make various versions of them (wide, long, log10, linear, etc. that are used later in the script or in the Rmd  file)
# WHO list of countries & their popsize.
# Various encoding of the countries name used for different purpose (match various data sources, for maps, shortened for figures etc.)
who_country_aliases_and_populations<-
read.csv('input_files/WHO_country_list.csv', stringsAsFactors = FALSE) %>%
rename( popsize = pop)
## Download data from https://covid19.who.int/table and read it in
data <-
read.csv(paste0('./data/', today, '/WHO-COVID-19-global-data.csv'), stringsAsFactors = FALSE) %>%
rename(Date_reported=ï..Date_reported) %>%
mutate(Date_reported=as.Date(Date_reported, format = "%Y-%m-%d"))
print(data)
## Extract data for WHO AFRO
africa_data <-
data[which(data$WHO_region == 'AFRO'& !(data$Country == "Réunion") & !(data$Country == "Mayotte")),] %>%## we didn't include the two territories before
select(.,c(1,3,6,8))%>%
rename("date"="Date_reported",
'country'="Country",
'cum_cases'="Cumulative_cases" ,
"cum_deaths"="Cumulative_deaths")
print(africa_data)
# All columns in WHO_cases_and_deaths are WHO countries.
# After modifying "Côte d'Ivoire" into "Cote d'Ivoire" (without the ^), and `São Tomé and Príncipe into Sao Tome and Principe, then the variable "country" of the who_country_aliases_and_populations is the one that matches the countries name of the data
# + formatting variable names to fit in rest of the script
WHO_cases_and_deaths<- africa_data %>%
mutate_at('country', ~replace(., .=="Côte d’Ivoire" , "Cote d'Ivoire"))%>%
# revert back to per day deaths / cases
group_by(country) %>%
mutate(cum_cases=as.integer(cum_cases),cum_deaths=as.integer(cum_deaths),cases = as.integer(c(0,diff(cum_cases))), deaths = as.integer(c(0,diff(cum_deaths)))) %>%
ungroup() %>%
# convert to per 10k pop
inner_join(who_country_aliases_and_populations %>%
select(country,popsize)) %>%
mutate(popsize = popsize / 10000,cum_cases_per_10k=cum_cases / popsize,cum_deaths_per_10k=cum_deaths / popsize,cases_per_10k=cases / popsize,deaths_per_10k=deaths / popsize)
# check data is complete
if(!(WHO_cases_and_deaths %>%
group_by(country) %>%
summarise(n()) %>%
distinct(n()) %>%
length()) == 1) stop('Some countries are missing reporting dates')
if(sum(is.na(WHO_cases_and_deaths$cases)) > 0 | sum(is.na(WHO_cases_and_deaths$deaths)) > 0) stop('Some countries have NA entries')
who_countrywide_data <-
WHO_cases_and_deaths[which(WHO_cases_and_deaths$date == as.Date(format(today,"%Y/%m/%d"))),]%>%
select(.,c(1,2,3,4,8,9)) %>%
inner_join(who_country_aliases_and_populations %>%
select(country,ISO3))
WHO_cases_and_deaths_weekly_ratio <- WHO_cases_and_deaths %>%
left_join(weekly_ratios_2(WHO_cases_and_deaths,"cases")) %>%
left_join(weekly_ratios_2(WHO_cases_and_deaths,"deaths"), suffix= c("_c","_d"), by = c("country", "date"))
# Creates the begining image / logo showing the WHO AFRO Region
africa <- geojson_read("./input_files/Africa1.geojson", what="sp")
africa@data %<>% left_join(who_countrywide_data, by=c("ISO_A3"="ISO3"))
africa@data$WHOCountry <- ifelse(is.na(africa@data$country),0,1)
png(file = "input_files/WHO_Africa3.png", width=3246, height=2880, pointsize=22)
typoLayer(spdf = africa, var = "WHOCountry", col = c("darkorange2", "white"), legend.pos = "n")
text(-34, -43,"Total Reported Cases", adj = 0,col="#08519C",font=2,cex=6)
text(-18, -48,paste0(WHO_cases_and_deaths %>% filter(date == today) %>% pull(cum_cases) %>% sum()), adj = 0,col="#08519C",font=2,cex=6)
text(24, -43,"Total Reported Deaths", adj = 0,col="#CB181D",font=2,cex=6)
text(44, -48,paste0(WHO_cases_and_deaths %>% filter(date == today) %>% pull(cum_deaths) %>% sum()), adj = 0,col="#CB181D",font=2,cex=6)
dev.off()
WHO_cases_and_deaths_negative <- WHO_cases_and_deaths %>%
mutate(cases_positive = (cases > -1), deaths_positive = (deaths > -1)) %>%
group_by(country) %>%
mutate(calc_cases_dt = eight_day_pos_window(cases_positive), calc_deaths_dt = eight_day_pos_window(deaths_positive)) %>%
ungroup()
# simulated datasets from bootstrapping
WHO_cases_and_deaths_simulated <- WHO_cases_and_deaths_negative %>%
group_by(country,date) %>%
mutate(sim_deaths = map(iter,rpois_error,deaths,deaths_positive),sim_cases = map(iter,rpois_error,cases,cases_positive)) %>%
group_by(country) %>%
mutate(sim_cum_deaths = sim_cum_calc_per_pop(sim_deaths,1,deaths_positive),
sim_cum_cases = sim_cum_calc_per_pop(sim_cases,1,cases_positive),
sim_cum_deaths_per_10k = sim_cum_calc_per_pop(sim_deaths,popsize,deaths_positive),
sim_cum_cases_per_10k = sim_cum_calc_per_pop(sim_cases,popsize,cases_positive)) %>%
ungroup()
# The TWO NEXT SECTIONS are to collect the Last day incidence of the observed data but ALSO OF THE SIMULATED DATA
# that, to be able to report a 95%CI on the observed data
# Done on the raw number of cases and the per 10k pop
print(WHO_cases_and_deaths_simulated)
# Last day Incidence & CI, raw ----
WHO_latest_day_cases_and_deaths_simulated <- WHO_cases_and_deaths_simulated %>%
filter(date == today) %>%
group_by(country)%>%
transmute(
last_day_case_ci_high =round(quantile(sim_cum_cases[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_high =round(quantile(sim_cum_deaths[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_low =round(quantile(sim_cum_cases[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_low =round(quantile(sim_cum_deaths[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_high_per_10k =round(quantile(sim_cum_cases_per_10k[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_high_per_10k =round(quantile(sim_cum_deaths_per_10k[[1]], c(0.95), method = 6,na.rm = TRUE))[[1]],
last_day_case_ci_low_per_10k =round(quantile(sim_cum_cases_per_10k[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]],
last_day_deaths_ci_low_per_10k =round(quantile(sim_cum_deaths_per_10k[[1]], c(0.05), method = 6,na.rm = TRUE))[[1]]) %>%
inner_join(
WHO_cases_and_deaths %>%
filter(date == today) %>%
transmute(
country,
last_day_case_obs = cum_cases,
last_day_deaths_obs = cum_deaths,
last_day_case_obs_per_10k = cum_cases_per_10k,
last_day_deaths_obs_per_10k = cum_deaths_per_10k
)
) %>%
ungroup()
